IF(NOT dynamind_SOURCE_DIR)
    FIND_PACKAGE(PkgConfig)
    FIND_PATH(DYNAMIND_INCLUDE_DIR dmnode.h
                PATHS   $ENV{DYNAMIND_DIR}/include
                PATH_SUFFIXES dynamindcore)
    FIND_LIBRARY(DYNAMIND_CORE_LIBRARY dynamindcore
                PATHS   $ENV{DYNAMIND_DIR}
                        $ENV{DYNAMIND_DIR}/lib
                        $ENV{DYNAMIND_DIR}/bin)
    FIND_LIBRARY(DYNAMIND_TOOLBOX_LIBRARY dynamindtoolbox
                PATHS   $ENV{DYNAMIND_DIR}
                        $ENV{DYNAMIND_DIR}/lib
                        $ENV{DYNAMIND_DIR}/bin)

    IF(DYNAMIND_CORE_LIBRARY)
        MESSAGE(STATUS "DYNAMIND_CORE_LIBRARY set to: ${DYNAMIND_CORE_LIBRARY}")
    ELSE()
        MESSAGE(STATUS "DYNAMIND_CORE_LIBRARY set to: ${DYNAMIND_CORE_LIBRARY}")
        MESSAGE(FATAL_ERROR "Could not find dynamind core library")
    ENDIF()

    IF(DYNAMIND_TOOLBOX_LIBRARY)
        MESSAGE(STATUS "DYNAMIND_TOOLBOX_LIBRARY set to: ${DYNAMIND_TOOLBOX_LIBRARY}")
    ELSE()
        MESSAGE(FATAL_ERROR "Could not find dynamind toolbox library")
    ENDIF()

    IF(DYNAMIND_INCLUDE_DIR)
        MESSAGE(STATUS "DYNAMIND_INCLUDE_DIR set to: ${DYNAMIND_INCLUDE_DIR}")
    ELSE()
        MESSAGE(FATAL_ERROR "Could not find dynamind header files")
    ENDIF()

    INCLUDE(FindPackageHandleStandardArgs)

    FUNCTION(DYNAMIND_INSTALL_LIBS DIRNAME)
        IF(WIN32 AND NOT LINUX)
            FIND_PATH(DLL_DIR dynamindcore.dll PATHS $ENV{DYNAMIND_DIR}/bin)
            INSTALL(FILES "${DLL_DIR}/dynamindcore.dll" DESTINATION ${DIRNAME})
            INSTALL(FILES "${DLL_DIR}/dynamindtoolbox.dll" DESTINATION ${DIRNAME})
            INSTALL(FILES "${DLL_DIR}/pydynamind.py" DESTINATION ${DIRNAME})
            INSTALL(FILES "${DLL_DIR}/pydmtoolbox.py" DESTINATION ${DIRNAME})
            MESSAGE(STATUS "\"DYNAMIND_INSTALL_LIBS\" FUNCTION ENABLED")
        ENDIF()
    ENDFUNCTION(DYNAMIND_INSTALL_LIBS)
ELSE()
    MESSAGE(STATUS "Dev files are from local source [BUILDING dynamind project]")
ENDIF()

FUNCTION(DYNAMIND_3RDPARTY_INSTALL_LIBS DIRNAME)
    IF(WIN32 AND NOT LINUX)
        FIND_PACKAGE(Boost 1.38.0 COMPONENTS program_options date_time REQUIRED)
        FIND_PACKAGE(Qt4 COMPONENTS QtCore QtGui REQUIRED)
        FILE(GLOB DLLS  ${QT_BINARY_DIR}/QtCore4.dll
                        ${QT_BINARY_DIR}/QtGui4.dll
                        ${QT_BINARY_DIR}/QtXml4.dll
                        ${QT_BINARY_DIR}/QtXmlPatterns4.dll
                        ${QT_BINARY_DIR}/QtNetwork4.dll
                        ${QT_BINARY_DIR}/QtWebKit4.dll
                        ${QT_BINARY_DIR}/phonon4.dll
                        ${QT_BINARY_DIR}/QtOpenGL4.dll
                        ${QT_BINARY_DIR}/QtSVG4.dll
                        ${QT_BINARY_DIR}/QtSql4.dll
                        ${Boost_LIBRARY_DIRS}/boost_python-*-mt-1_*.dll
                        ${Boost_LIBRARY_DIRS}/boost_system-*-mt-1_*.dll
                        ${Boost_LIBRARY_DIRS}/boost_signals-*-mt-1_*.dll
                        ${Boost_LIBRARY_DIRS}/boost_date_time-*-mt-1_*.dll
                        ${Boost_LIBRARY_DIRS}/boost_filesystem-*-mt-1_*.dll
                        ${Boost_LIBRARY_DIRS}/boost_program_options-*-mt-1_*.dll)

        INSTALL(FILES ${DLLS} DESTINATION ${DIRNAME})
        INSTALL(FILES ${QT_BINARY_DIR}/../plugins/sqldrivers/qsqlmysql4.dll DESTINATION ${DIRNAME}/plugins/sqldrivers)
    ENDIF()
    MESSAGE(STATUS "\"DYNAMIND_3RDPARTY_INSTALL_LIBS\" FUNCTION ENABLED")
ENDFUNCTION(DYNAMIND_3RDPARTY_INSTALL_LIBS)

